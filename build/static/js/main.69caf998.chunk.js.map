{"version":3,"sources":["services/notes.js","components/Note.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["baseUrl","request","axios","get","nonExisting","id","content","date","important","then","response","data","concat","newObject","post","put","Note","note","toggleImportance","label","className","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","length","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"6LAGMA,EAAU,aAsBC,EArBF,WACX,IAAMC,EAAUC,IAAMC,IAAIH,GACpBI,EAAc,CAClBC,GAAI,IACJC,QAAS,mCACTC,KAAM,2BACNC,WAAW,GAEb,OAAOP,EAAQQ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAOR,OAaxC,EAVF,SAAAS,GAEX,OADgBX,IAAMY,KAAKd,EAASa,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACN,EAAIQ,GAElB,OADgBX,IAAMa,IAAN,UAAaf,EAAb,YAAwBK,GAAMQ,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,S,OCT9BK,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKT,UACf,qBAAuB,iBAE3B,OACE,qBAAIY,UAAU,OAAd,UACGH,EAAKX,QACN,wBAAQe,QAASH,EAAjB,SAAoCC,QCG3BG,EAZI,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACK,KAIP,qBAAKH,UAAU,QAAf,SACGG,KCOQC,EAdF,WAMX,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,2GCwFOC,EA3FH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,0BAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WACRC,IAEC/B,MAAK,SAAAgC,GACJT,EAASS,QAEV,IAGH,IAqBMC,EAAcP,EAClBJ,EACAA,EAAMY,QAAO,SAAA1B,GAAI,OAAuB,IAAnBA,EAAKT,aAuB5B,OACE,gCACE,uCACA,cAAC,EAAD,CAAce,QAASc,IACvB,8BACE,yBAAQhB,QAAS,kBAAMe,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGO,EAAYE,KAAI,SAAC3B,GAAD,OACf,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBAnCD,SAAAb,GAEzB,IAAMY,EAAOc,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAEzC,KAAOA,KAChC0C,EAAW,2BAAQ9B,GAAR,IAAcT,WAAYS,EAAKT,YAEhDgC,EACQnC,EAAI0C,GACXtC,MAAK,SAAAuC,GACJhB,EAASD,EAAMa,KAAI,SAAA3B,GAAI,OAAIA,EAAKZ,KAAOA,EAAKY,EAAO+B,SAEpDC,OAAM,SAAAC,GACLZ,EAAgB,SAAD,OACJrB,EAAKX,QADD,sCAGf6C,YAAW,WACTb,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAAG,GAAC,OAAIA,EAAEzC,KAAOA,SAkBN+C,CAAmBnC,EAAKZ,MAF3CY,EAAKZ,SAMhB,uBAAMgD,SAhEM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBlD,QAAS2B,EACT1B,MAAM,IAAIkD,MAAOC,cACjBlD,UAAWmD,KAAKC,SAAW,GAC3BvD,GAAI0B,EAAM8B,OAAS,GAGrBrB,EACUgB,GACP/C,MAAK,SAAAuC,GACJhB,EAASD,EAAMnB,OAAOoC,IACtBd,EAAW,QAmDb,UACE,uBACA4B,MAAO7B,EACP8B,SAlDmB,SAACT,GACxBpB,EAAWoB,EAAMU,OAAOF,UAmDpB,wBAAQG,KAAK,SAAb,qBAEF,cAAC,EAAD,QCvFJC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.69caf998.chunk.js","sourcesContent":["import axios from 'axios'\r\n//const baseUrl = 'http://localhost:3001/api/notes'\r\n//const baseUrl = 'https://mysterious-dawn-46523.herokuapp.com/api/notes'\r\nconst baseUrl = '/api/notes'\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    const nonExisting = {\r\n      id: 10000,\r\n      content: 'This note is not saved to server',\r\n      date: '2019-05-30T17:30:31.098Z',\r\n      important: true,\r\n    }\r\n    return request.then(response => response.data.concat(nonExisting))\r\n  }\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  const update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n\r\n  export default { getAll, create, update }","import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n    const label = note.important\r\n      ? 'make not important' : 'make important'\r\n  \r\n    return (\r\n      <li className='note'>\r\n        {note.content} \r\n        <button onClick={toggleImportance}>{label}</button>\r\n      </li>\r\n    )\r\n  }\r\nexport default Note","const Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Notification","const Footer = () => {\r\n    const footerStyle = {\r\n      color: 'green',\r\n      fontStyle: 'italic',\r\n      fontSize: 16\r\n    }\r\n    return (\r\n      <div style={footerStyle}>\r\n        <br />\r\n        <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Footer","import React, { useState, useEffect } from 'react'\r\nimport noteService from './services/notes'\r\nimport Note from './components/Note'\r\nimport Notification from './components/Notification'\r\nimport Footer from './components/Footer'\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([])\r\n  const [newNote, setNewNote] = useState('') \r\n  const [showAll, setShowAll] = useState(true)\r\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\r\n\r\n  useEffect(() => {\r\n    noteService\r\n    .getAll()\r\n    .then(initialNotes  => {\r\n      setNotes(initialNotes )\r\n    })\r\n  }, [])\r\n\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault()\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() < 0.5,\r\n      id: notes.length + 1,\r\n    }\r\n\r\n    noteService\r\n      .create(noteObject)\r\n      .then(returnedNote => {\r\n        setNotes(notes.concat(returnedNote))\r\n        setNewNote('')\r\n      })\r\n  }\r\n\r\n  const handleNoteChange = (event) => {\r\n    setNewNote(event.target.value)\r\n  }\r\n\r\n  const notesToShow = showAll\r\n  ? notes\r\n  : notes.filter(note => note.important === true)\r\n\r\n  const toggleImportanceOf = id => {\r\n    \r\n    const note = notes.find(n => n.id === id)\r\n    const changedNote = { ...note, important: !note.important }\r\n  \r\n    noteService\r\n    .update(id, changedNote)\r\n    .then(returnedNote => {\r\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n    })\r\n    .catch(error => {\r\n      setErrorMessage(\r\n        `Note '${note.content}' was already removed from server`\r\n      )\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 5000)\r\n      setNotes(notes.filter(n => n.id !== id))\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <Notification message={errorMessage} />\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? 'important' : 'all' }\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map((note) => \r\n          <Note \r\n            key={note.id} \r\n            note={note}\r\n            toggleImportance={() => toggleImportanceOf(note.id)}\r\n           />\r\n        )}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input \r\n        value={newNote}\r\n        onChange={handleNoteChange}\r\n         />\r\n        <button type=\"submit\">save</button>\r\n      </form>\r\n      <Footer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\n  ReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n  )"],"sourceRoot":""}